window.SIDEBAR_ITEMS = {"fn":[["new_random_should_not_exceeed_starting_capital","When a market gets created using the `new_random` constructor, the total value of the market expressed in default_good_kind and calculated with the default exchange rate shall not exceed the `STARTING_CAPITAL`."],["price_changes_waiting",""],["should_initialize_with_right_quantity","When a market gets created using the `new_with_quantities` constructor, the quantities of each good in the market should correspond to the ones passed as parameters to the constructor."],["test_buy_good_kind_not_default",""],["test_buy_insufficient_good_quantity",""],["test_buy_success",""],["test_buy_unrecognized_token",""],["test_deadlock_prevention","test that a market implement at least one of the strategy to prevent the deadlock mate by team SMSE"],["test_get_budget","test from team PARSE"],["test_get_buy_price_insufficient_qty_error",""],["test_get_buy_price_non_positive_error",""],["test_get_buy_price_success",""],["test_get_goods","test from team PARSE"],["test_get_name","test from team PARSE"],["test_get_sell_price_non_positive_error",""],["test_get_sell_price_success",""],["test_lock_buy_bid_too_low",""],["test_lock_buy_insufficient_good_quantity_available",""],["test_lock_buy_non_positive_bid",""],["test_lock_buy_non_positive_quantity_to_buy",""],["test_lock_sell_defaultGoodAlreadyLocked","test from team ZSE"],["test_lock_sell_insufficientDefaultGoodQuantityAvailable","test from team ZSE"],["test_lock_sell_maxAllowedLocksReached","test from team ZSE"],["test_lock_sell_nonPositiveOffer","test from team ZSE"],["test_lock_sell_offerTooHigh","test from team ZSE"],["test_name",""],["test_new_random",""],["test_price_change_after_buy",""],["test_price_change_after_sell",""],["test_price_increase",""],["test_sell_expired_token","The `sell` function needs to be called after `lock_sell`, which creates an immutable contract ready to be fulfilled. This test assumes that `lock_sell` and `get_sell_price` work correctly, otherwise fails."],["test_sell_insufficient_good_quantity","The `sell` function needs to be called after `lock_sell`, which creates an immutable contract ready to be fulfilled. This test assumes that `lock_sell` and `get_sell_price` work correctly, otherwise fails."],["test_sell_success","The `sell` function needs to be called after `lock_sell`, which creates an immutable contract ready to be fulfilled. This test assumes that `lock_sell` and `get_sell_price` work correctly, otherwise fails."],["test_sell_unrecognized_token","The `sell` function needs to be called after `lock_sell`, which creates an immutable contract ready to be fulfilled. This test assumes that `lock_sell` and `get_sell_price` work correctly, otherwise fails."],["test_sell_wrong_good_kind","The `sell` function needs to be called after `lock_sell`, which creates an immutable contract ready to be fulfilled. This test assumes that `lock_sell` and `get_sell_price` work correctly, otherwise fails."],["test_working_function_lock_sell_token","test from team ZSE"]]};